/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated;

import no.sintef.jasm.*;
import no.sintef.jasm.ext.*;

import org.thingml.generated.api.*;
import org.thingml.generated.messages.*;

import java.util.*;

/**
 * Definition for type : PIM
 **/
public class PIM extends Component implements IPIM_human_input, IPIM_get_sensor, IPIM_guard_temperature, IPIM_guard_human {

private boolean debug = false;
public boolean isDebug() {return debug;}
public void setDebug(boolean debug) {this.debug = debug;}
public String toString() {
String result = "instance " + getName() + "\n";
result += "\ttmrature = " + PIM_tmrature_var;
result += "\tthermo_id = " + PIM_thermo_id_var;
result += "\tswitch_id = " + PIM_switch_id_var;
result += "\tdelta = " + PIM_delta_var;
result += "\tcurrent_temp = " + PIM_current_temp_var;
result += "\tlast_temp_1 = " + PIM_last_temp_1_var;
result += "\tlast_temp_2 = " + PIM_last_temp_2_var;
result += "\tlast_temp_3 = " + PIM_last_temp_3_var;
result += "\tlast_temp_4 = " + PIM_last_temp_4_var;
result += "\tlast_temp_5 = " + PIM_last_temp_5_var;
result += "\tcurrent_average_diff = " + PIM_current_average_diff_var;
result += "\twarming_time = " + PIM_warming_time_var;
result += "\tcooling_time = " + PIM_cooling_time_var;
result += "";
return result;
}

public synchronized void temperature_via_get_sensor(int TemperatureMsg_temperature_id_var, String TemperatureMsg_temperature_txt_var, double TemperatureMsg_temperature_t_var){
final Event _msg = temperatureType.instantiate(TemperatureMsg_temperature_id_var, TemperatureMsg_temperature_txt_var, TemperatureMsg_temperature_t_var);
_msg.setPort(get_sensor_port);
receive(_msg);
}

public synchronized void SwitchOn_via_human_input(int OnOffMsg_SwitchOn_did_var){
final Event _msg = SwitchOnType.instantiate(OnOffMsg_SwitchOn_did_var);
_msg.setPort(human_input_port);
receive(_msg);
}

public synchronized void SwitchOff_via_human_input(int OnOffMsg_SwitchOff_did_var){
final Event _msg = SwitchOffType.instantiate(OnOffMsg_SwitchOff_did_var);
_msg.setPort(human_input_port);
receive(_msg);
}

public synchronized void set_temperature_via_human_input(double TemperatureMsg_set_temperature_t_var){
final Event _msg = set_temperatureType.instantiate(TemperatureMsg_set_temperature_t_var);
_msg.setPort(human_input_port);
receive(_msg);
}

public synchronized void set_delta_via_human_input(double TemperatureMsg_set_delta_dlta_var){
final Event _msg = set_deltaType.instantiate(TemperatureMsg_set_delta_dlta_var);
_msg.setPort(human_input_port);
receive(_msg);
}

public synchronized void fetch_temp_via_human_input(){
final Event _msg = fetch_tempType.instantiate();
_msg.setPort(human_input_port);
receive(_msg);
}

public synchronized void timer_timeout_via_guard_temperature(){
final Event _msg = timer_timeoutType.instantiate();
_msg.setPort(guard_temperature_port);
receive(_msg);
}

public synchronized void timer_timeout_via_guard_human(){
final Event _msg = timer_timeoutType.instantiate();
_msg.setPort(guard_human_port);
receive(_msg);
}

private void sendAdd_thermometer_via_request_sensor(int TemperatureMsg_add_thermometer_id_var, String TemperatureMsg_add_thermometer_txt_var){
request_sensor_port.send(add_thermometerType.instantiate(TemperatureMsg_add_thermometer_id_var, TemperatureMsg_add_thermometer_txt_var));
}

private void sendAdd_device_via_request_actuator(int DeviceGeneral_add_device_did_var){
request_actuator_port.send(add_deviceType.instantiate(DeviceGeneral_add_device_did_var));
}

private void sendSwitchOn_via_request_actuator(int OnOffMsg_SwitchOn_did_var){
request_actuator_port.send(SwitchOnType.instantiate(OnOffMsg_SwitchOn_did_var));
}

private void sendSwitchOff_via_request_actuator(int OnOffMsg_SwitchOff_did_var){
request_actuator_port.send(SwitchOffType.instantiate(OnOffMsg_SwitchOff_did_var));
}

private void sendTemperature_via_human_output(int TemperatureMsg_temperature_id_var, String TemperatureMsg_temperature_txt_var, double TemperatureMsg_temperature_t_var){
human_output_port.send(temperatureType.instantiate(TemperatureMsg_temperature_id_var, TemperatureMsg_temperature_txt_var, TemperatureMsg_temperature_t_var));
}

private void sendPrompt_via_human_output(String GeneralMsg_prompt_txt_var){
human_output_port.send(promptType.instantiate(GeneralMsg_prompt_txt_var));
}

private void sendTimer_start_via_guard_temperature(int TimerMsgs_timer_start_delay_var){
guard_temperature_port.send(timer_startType.instantiate(TimerMsgs_timer_start_delay_var));
}

private void sendTimer_cancel_via_guard_temperature(){
guard_temperature_port.send(timer_cancelType.instantiate());
}

private void sendTimer_start_via_guard_human(int TimerMsgs_timer_start_delay_var){
guard_human_port.send(timer_startType.instantiate(TimerMsgs_timer_start_delay_var));
}

private void sendTimer_cancel_via_guard_human(){
guard_human_port.send(timer_cancelType.instantiate());
}

//Attributes
private int PIM_switch_id_var;
private double PIM_current_average_diff_var;
private double PIM_tmrature_var;
private double PIM_last_temp_1_var;
private double PIM_cooling_time_var;
private double PIM_delta_var;
private double PIM_last_temp_3_var;
private double PIM_last_temp_4_var;
private double PIM_last_temp_5_var;
private double PIM_last_temp_2_var;
private double PIM_warming_time_var;
private double PIM_current_temp_var;
private int PIM_thermo_id_var;
//Ports
private Port get_sensor_port;
private Port request_sensor_port;
private Port request_actuator_port;
private Port human_input_port;
private Port human_output_port;
private Port guard_temperature_port;
private Port guard_human_port;
//Message types
protected final PromptMessageType promptType = new PromptMessageType();
protected final SensorinfoMessageType sensorinfoType = new SensorinfoMessageType();
protected final DeviceinfoMessageType deviceinfoType = new DeviceinfoMessageType();
protected final TemperatureMessageType temperatureType = new TemperatureMessageType();
protected final Add_thermometerMessageType add_thermometerType = new Add_thermometerMessageType();
protected final Set_temperatureMessageType set_temperatureType = new Set_temperatureMessageType();
protected final Set_deltaMessageType set_deltaType = new Set_deltaMessageType();
protected final Fetch_tempMessageType fetch_tempType = new Fetch_tempMessageType();
protected final Add_deviceMessageType add_deviceType = new Add_deviceMessageType();
protected final SwitchOnMessageType SwitchOnType = new SwitchOnMessageType();
protected final SwitchOffMessageType SwitchOffType = new SwitchOffMessageType();
protected final Timer_startMessageType timer_startType = new Timer_startMessageType();
protected final Timer_cancelMessageType timer_cancelType = new Timer_cancelMessageType();
protected final Timer_timeoutMessageType timer_timeoutType = new Timer_timeoutMessageType();
protected final LuminanceMessageType luminanceType = new LuminanceMessageType();
protected final Add_lightsensorMessageType add_lightsensorType = new Add_lightsensorMessageType();
protected final Set_luminanceMessageType set_luminanceType = new Set_luminanceMessageType();
protected final Set_day_startMessageType set_day_startType = new Set_day_startMessageType();
protected final Set_night_startMessageType set_night_startType = new Set_night_startMessageType();
//Empty Constructor
public PIM() {
super();
}

//Getters and Setters for non readonly/final attributes
public int getPIM_switch_id_var() {
return PIM_switch_id_var;
}

public void setPIM_switch_id_var(int PIM_switch_id_var) {
this.PIM_switch_id_var = PIM_switch_id_var;
}

public PIM initPIM_switch_id_var(int PIM_switch_id_var) {
this.PIM_switch_id_var = PIM_switch_id_var;
return this;
}

public double getPIM_current_average_diff_var() {
return PIM_current_average_diff_var;
}

public void setPIM_current_average_diff_var(double PIM_current_average_diff_var) {
this.PIM_current_average_diff_var = PIM_current_average_diff_var;
}

public PIM initPIM_current_average_diff_var(double PIM_current_average_diff_var) {
this.PIM_current_average_diff_var = PIM_current_average_diff_var;
return this;
}

public double getPIM_tmrature_var() {
return PIM_tmrature_var;
}

public void setPIM_tmrature_var(double PIM_tmrature_var) {
this.PIM_tmrature_var = PIM_tmrature_var;
}

public PIM initPIM_tmrature_var(double PIM_tmrature_var) {
this.PIM_tmrature_var = PIM_tmrature_var;
return this;
}

public double getPIM_last_temp_1_var() {
return PIM_last_temp_1_var;
}

public void setPIM_last_temp_1_var(double PIM_last_temp_1_var) {
this.PIM_last_temp_1_var = PIM_last_temp_1_var;
}

public PIM initPIM_last_temp_1_var(double PIM_last_temp_1_var) {
this.PIM_last_temp_1_var = PIM_last_temp_1_var;
return this;
}

public double getPIM_cooling_time_var() {
return PIM_cooling_time_var;
}

public void setPIM_cooling_time_var(double PIM_cooling_time_var) {
this.PIM_cooling_time_var = PIM_cooling_time_var;
}

public PIM initPIM_cooling_time_var(double PIM_cooling_time_var) {
this.PIM_cooling_time_var = PIM_cooling_time_var;
return this;
}

public double getPIM_delta_var() {
return PIM_delta_var;
}

public void setPIM_delta_var(double PIM_delta_var) {
this.PIM_delta_var = PIM_delta_var;
}

public PIM initPIM_delta_var(double PIM_delta_var) {
this.PIM_delta_var = PIM_delta_var;
return this;
}

public double getPIM_last_temp_3_var() {
return PIM_last_temp_3_var;
}

public void setPIM_last_temp_3_var(double PIM_last_temp_3_var) {
this.PIM_last_temp_3_var = PIM_last_temp_3_var;
}

public PIM initPIM_last_temp_3_var(double PIM_last_temp_3_var) {
this.PIM_last_temp_3_var = PIM_last_temp_3_var;
return this;
}

public double getPIM_last_temp_4_var() {
return PIM_last_temp_4_var;
}

public void setPIM_last_temp_4_var(double PIM_last_temp_4_var) {
this.PIM_last_temp_4_var = PIM_last_temp_4_var;
}

public PIM initPIM_last_temp_4_var(double PIM_last_temp_4_var) {
this.PIM_last_temp_4_var = PIM_last_temp_4_var;
return this;
}

public double getPIM_last_temp_5_var() {
return PIM_last_temp_5_var;
}

public void setPIM_last_temp_5_var(double PIM_last_temp_5_var) {
this.PIM_last_temp_5_var = PIM_last_temp_5_var;
}

public PIM initPIM_last_temp_5_var(double PIM_last_temp_5_var) {
this.PIM_last_temp_5_var = PIM_last_temp_5_var;
return this;
}

public double getPIM_last_temp_2_var() {
return PIM_last_temp_2_var;
}

public void setPIM_last_temp_2_var(double PIM_last_temp_2_var) {
this.PIM_last_temp_2_var = PIM_last_temp_2_var;
}

public PIM initPIM_last_temp_2_var(double PIM_last_temp_2_var) {
this.PIM_last_temp_2_var = PIM_last_temp_2_var;
return this;
}

public double getPIM_warming_time_var() {
return PIM_warming_time_var;
}

public void setPIM_warming_time_var(double PIM_warming_time_var) {
this.PIM_warming_time_var = PIM_warming_time_var;
}

public PIM initPIM_warming_time_var(double PIM_warming_time_var) {
this.PIM_warming_time_var = PIM_warming_time_var;
return this;
}

public double getPIM_current_temp_var() {
return PIM_current_temp_var;
}

public void setPIM_current_temp_var(double PIM_current_temp_var) {
this.PIM_current_temp_var = PIM_current_temp_var;
}

public PIM initPIM_current_temp_var(double PIM_current_temp_var) {
this.PIM_current_temp_var = PIM_current_temp_var;
return this;
}

public int getPIM_thermo_id_var() {
return PIM_thermo_id_var;
}

public void setPIM_thermo_id_var(int PIM_thermo_id_var) {
this.PIM_thermo_id_var = PIM_thermo_id_var;
}

public PIM initPIM_thermo_id_var(int PIM_thermo_id_var) {
this.PIM_thermo_id_var = PIM_thermo_id_var;
return this;
}

//Getters for Ports
public Port getGet_sensor_port() {
return get_sensor_port;
}
public Port getRequest_sensor_port() {
return request_sensor_port;
}
public Port getRequest_actuator_port() {
return request_actuator_port;
}
public Port getHuman_input_port() {
return human_input_port;
}
public Port getHuman_output_port() {
return human_output_port;
}
public Port getGuard_temperature_port() {
return guard_temperature_port;
}
public Port getGuard_human_port() {
return guard_human_port;
}
private CompositeState buildPIM_PIM_behavior(){
final CompositeState state_PIM_PIM_behavior_Build = buildPIM_PIM_behavior_Build();
final CompositeState state_PIM_PIM_behavior_Running = buildPIM_PIM_behavior_Running();
Handler h182664520 = new Handler();
h182664520.from(state_PIM_PIM_behavior_Build);
h182664520.event(set_deltaType);
h182664520.port(human_input_port);
h182664520.action((Event e)->{
final Set_deltaMessageType.Set_deltaMessage set_delta = (Set_deltaMessageType.Set_deltaMessage) e;
PIM_delta_var = (double) (set_delta.dlta);
});

Handler h600378168 = new Handler();
h600378168.from(state_PIM_PIM_behavior_Build);
h600378168.event(fetch_tempType);
h600378168.port(human_input_port);
h600378168.action((Event e)->{
sendTemperature_via_human_output((int) (getPIM_thermo_id_var()), (String) ("temperature "), (double) (getPIM_current_temp_var()));
});

Handler h2142004769 = new Handler();
h2142004769.from(state_PIM_PIM_behavior_Build);
h2142004769.event(temperatureType);
h2142004769.port(get_sensor_port);
h2142004769.action((Event e)->{
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
PIM_current_average_diff_var = (double) ((getPIM_last_temp_5_var() - getPIM_last_temp_1_var()) / 5);
PIM_current_temp_var = (double) (temperature.t);
PIM_last_temp_1_var = (double) (getPIM_last_temp_2_var());
PIM_last_temp_2_var = (double) (getPIM_last_temp_3_var());
PIM_last_temp_3_var = (double) (getPIM_last_temp_4_var());
PIM_last_temp_4_var = (double) (getPIM_last_temp_5_var());
PIM_last_temp_5_var = (double) (getPIM_current_temp_var());
});

Transition h1317660806 = new Transition();
h1317660806.from(state_PIM_PIM_behavior_Build).to(state_PIM_PIM_behavior_Running);
h1317660806.event(set_temperatureType);
h1317660806.port(human_input_port);
h1317660806.action((Event e)->{
final Set_temperatureMessageType.Set_temperatureMessage set_temperature = (Set_temperatureMessageType.Set_temperatureMessage) e;
PIM_tmrature_var = (double) (set_temperature.t);
sendPrompt_via_human_output((String) ("Now entering thermostat. Please give temperature observations"));
});

Transition h1801542941 = new Transition();
h1801542941.from(state_PIM_PIM_behavior_Build).to(state_PIM_PIM_behavior_Build);
h1801542941.event(timer_timeoutType);
h1801542941.port(guard_human_port);
h1801542941.action((Event e)->{
sendPrompt_via_human_output((String) ("Please continue doing the build of the temperature control"));
});

Handler h566736718 = new Handler();
h566736718.from(state_PIM_PIM_behavior_Running);
h566736718.event(fetch_tempType);
h566736718.port(human_input_port);
h566736718.action((Event e)->{
sendTemperature_via_human_output((int) (getPIM_thermo_id_var()), (String) ("temperature "), (double) (getPIM_current_temp_var()));
});

Transition h844979230 = new Transition();
h844979230.from(state_PIM_PIM_behavior_Running).to(state_PIM_PIM_behavior_Running);
h844979230.event(set_deltaType);
h844979230.port(human_input_port);
h844979230.action((Event e)->{
final Set_deltaMessageType.Set_deltaMessage set_delta = (Set_deltaMessageType.Set_deltaMessage) e;
PIM_delta_var = (double) (set_delta.dlta);
});

Transition h1429616723 = new Transition();
h1429616723.from(state_PIM_PIM_behavior_Running).to(state_PIM_PIM_behavior_Running);
h1429616723.event(SwitchOnType);
h1429616723.port(human_input_port);
h1429616723.action((Event e)->{
final SwitchOnMessageType.SwitchOnMessage SwitchOn = (SwitchOnMessageType.SwitchOnMessage) e;
sendPrompt_via_human_output((String) ("INTERNAL ERROR: Impossible SwitchOn at PIM.Running"));
});

Transition h1235319479 = new Transition();
h1235319479.from(state_PIM_PIM_behavior_Running).to(state_PIM_PIM_behavior_Running);
h1235319479.event(SwitchOffType);
h1235319479.port(human_input_port);
h1235319479.action((Event e)->{
final SwitchOffMessageType.SwitchOffMessage SwitchOff = (SwitchOffMessageType.SwitchOffMessage) e;
sendPrompt_via_human_output((String) ("INTERNAL ERROR: Impossible SwitchOff at PIM.Running"));
});

Transition h736919037 = new Transition();
h736919037.from(state_PIM_PIM_behavior_Running).to(state_PIM_PIM_behavior_Running);
h736919037.event(set_temperatureType);
h736919037.port(human_input_port);
h736919037.action((Event e)->{
final Set_temperatureMessageType.Set_temperatureMessage set_temperature = (Set_temperatureMessageType.Set_temperatureMessage) e;
sendPrompt_via_human_output((String) ("INTERNAL ERROR: Impossible set_temperature at PIM.Running"));
});

Transition h631229162 = new Transition();
h631229162.from(state_PIM_PIM_behavior_Running).to(state_PIM_PIM_behavior_Running);
h631229162.event(temperatureType);
h631229162.port(get_sensor_port);
h631229162.action((Event e)->{
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
sendPrompt_via_human_output((String) ("INTERNAL ERROR: temperature received at PIM.Running"));
PIM_current_temp_var = (double) (temperature.t);
});

final CompositeState state_PIM_PIM_behavior = new CompositeState("PIM_behavior");
state_PIM_PIM_behavior.onEntry(()->{
System.out.print(""+(("Running The Room X3D3.MQTT.sim\n")));
});
state_PIM_PIM_behavior.add(state_PIM_PIM_behavior_Build);
state_PIM_PIM_behavior.add(state_PIM_PIM_behavior_Running);
state_PIM_PIM_behavior.initial(state_PIM_PIM_behavior_Build);
return state_PIM_PIM_behavior;
}

private CompositeState buildPIM_PIM_behavior_Build(){
final AtomicState state_PIM_PIM_behavior_Build_SetThermostat = new AtomicState("SetThermostat");
state_PIM_PIM_behavior_Build_SetThermostat.onEntry(()->{
sendAdd_thermometer_via_request_sensor((int) (getPIM_thermo_id_var()), (String) ("t"));
sendAdd_device_via_request_actuator((int) (getPIM_switch_id_var()));
});
Transition h2095635989 = new Transition();
h2095635989.from(state_PIM_PIM_behavior_Build_SetThermostat).to(state_PIM_PIM_behavior_Build_SetThermostat);
h2095635989.event(SwitchOnType);
h2095635989.port(human_input_port);
h2095635989.action((Event e)->{
final SwitchOnMessageType.SwitchOnMessage SwitchOn = (SwitchOnMessageType.SwitchOnMessage) e;
sendPrompt_via_human_output((String) ("Please set temperature for Thermostat"));
});

Transition h1950464014 = new Transition();
h1950464014.from(state_PIM_PIM_behavior_Build_SetThermostat).to(state_PIM_PIM_behavior_Build_SetThermostat);
h1950464014.event(SwitchOffType);
h1950464014.port(human_input_port);
h1950464014.action((Event e)->{
final SwitchOffMessageType.SwitchOffMessage SwitchOff = (SwitchOffMessageType.SwitchOffMessage) e;
sendPrompt_via_human_output((String) ("Please set temperature for Thermostat"));
});

final CompositeState state_PIM_PIM_behavior_Build = new CompositeState("Build");
state_PIM_PIM_behavior_Build.onEntry(()->{
sendTimer_start_via_guard_human((int) (30000));
});
state_PIM_PIM_behavior_Build.onExit(()->{
sendTimer_cancel_via_guard_human();
});

state_PIM_PIM_behavior_Build.add(state_PIM_PIM_behavior_Build_SetThermostat);
state_PIM_PIM_behavior_Build.keepHistory(true);
state_PIM_PIM_behavior_Build.initial(state_PIM_PIM_behavior_Build_SetThermostat);
return state_PIM_PIM_behavior_Build;
}

private CompositeState buildPIM_PIM_behavior_Running(){
final CompositeState state_PIM_PIM_behavior_Running_Thermostat = buildPIM_PIM_behavior_Running_Thermostat();
final AtomicState state_PIM_PIM_behavior_Running_On = new AtomicState("On");
final AtomicState state_PIM_PIM_behavior_Running_Off = new AtomicState("Off");
Transition h279928359 = new Transition();
h279928359.from(state_PIM_PIM_behavior_Running_Thermostat).to(state_PIM_PIM_behavior_Running_On);
h279928359.event(SwitchOnType);
h279928359.port(human_input_port);
h279928359.action((Event e)->{
final SwitchOnMessageType.SwitchOnMessage SwitchOn = (SwitchOnMessageType.SwitchOnMessage) e;
sendSwitchOn_via_request_actuator((int) (SwitchOn.did));
});

Transition h120734723 = new Transition();
h120734723.from(state_PIM_PIM_behavior_Running_Thermostat).to(state_PIM_PIM_behavior_Running_Off);
h120734723.event(SwitchOffType);
h120734723.port(human_input_port);
h120734723.action((Event e)->{
final SwitchOffMessageType.SwitchOffMessage SwitchOff = (SwitchOffMessageType.SwitchOffMessage) e;
sendSwitchOff_via_request_actuator((int) (SwitchOff.did));
});

Transition h598004933 = new Transition();
h598004933.from(state_PIM_PIM_behavior_Running_Thermostat).to(state_PIM_PIM_behavior_Running_Thermostat);
h598004933.event(set_temperatureType);
h598004933.port(human_input_port);
h598004933.action((Event e)->{
final Set_temperatureMessageType.Set_temperatureMessage set_temperature = (Set_temperatureMessageType.Set_temperatureMessage) e;
PIM_tmrature_var = (double) (set_temperature.t);
System.out.println(""+(("Changing temp to: ")));
System.out.println(""+((getPIM_tmrature_var())));
});

Transition h1934791141 = new Transition();
h1934791141.from(state_PIM_PIM_behavior_Running_On).to(state_PIM_PIM_behavior_Running_Off);
h1934791141.event(SwitchOffType);
h1934791141.port(human_input_port);
h1934791141.action((Event e)->{
final SwitchOffMessageType.SwitchOffMessage SwitchOff = (SwitchOffMessageType.SwitchOffMessage) e;
sendSwitchOff_via_request_actuator((int) (SwitchOff.did));
});

Transition h808773056 = new Transition();
h808773056.from(state_PIM_PIM_behavior_Running_On).to(state_PIM_PIM_behavior_Running_On);
h808773056.event(SwitchOnType);
h808773056.port(human_input_port);
h808773056.action((Event e)->{
final SwitchOnMessageType.SwitchOnMessage SwitchOn = (SwitchOnMessageType.SwitchOnMessage) e;
sendSwitchOn_via_request_actuator((int) (SwitchOn.did));
});

Transition h1515532785 = new Transition();
h1515532785.from(state_PIM_PIM_behavior_Running_On).to(state_PIM_PIM_behavior_Running_Thermostat);
h1515532785.event(set_temperatureType);
h1515532785.port(human_input_port);
h1515532785.action((Event e)->{
final Set_temperatureMessageType.Set_temperatureMessage set_temperature = (Set_temperatureMessageType.Set_temperatureMessage) e;
PIM_tmrature_var = (double) (set_temperature.t);
});

Transition h1659427365 = new Transition();
h1659427365.from(state_PIM_PIM_behavior_Running_On).to(state_PIM_PIM_behavior_Running_On);
h1659427365.event(temperatureType);
h1659427365.port(get_sensor_port);
h1659427365.action((Event e)->{
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
if(getPIM_current_temp_var() > temperature.t) {
sendSwitchOn_via_request_actuator((int) (getPIM_switch_id_var()));

}
PIM_current_temp_var = (double) (temperature.t);
PIM_last_temp_1_var = (double) (getPIM_last_temp_2_var());
PIM_last_temp_2_var = (double) (getPIM_last_temp_3_var());
PIM_last_temp_3_var = (double) (getPIM_last_temp_4_var());
PIM_last_temp_4_var = (double) (getPIM_last_temp_5_var());
PIM_last_temp_5_var = (double) (getPIM_current_temp_var());
});

Transition h1592579084 = new Transition();
h1592579084.from(state_PIM_PIM_behavior_Running_Off).to(state_PIM_PIM_behavior_Running_Off);
h1592579084.event(SwitchOffType);
h1592579084.port(human_input_port);
h1592579084.action((Event e)->{
final SwitchOffMessageType.SwitchOffMessage SwitchOff = (SwitchOffMessageType.SwitchOffMessage) e;
sendSwitchOff_via_request_actuator((int) (SwitchOff.did));
});

Transition h1674929871 = new Transition();
h1674929871.from(state_PIM_PIM_behavior_Running_Off).to(state_PIM_PIM_behavior_Running_On);
h1674929871.event(SwitchOnType);
h1674929871.port(human_input_port);
h1674929871.action((Event e)->{
final SwitchOnMessageType.SwitchOnMessage SwitchOn = (SwitchOnMessageType.SwitchOnMessage) e;
sendSwitchOn_via_request_actuator((int) (SwitchOn.did));
});

Transition h801434438 = new Transition();
h801434438.from(state_PIM_PIM_behavior_Running_Off).to(state_PIM_PIM_behavior_Running_Thermostat);
h801434438.event(set_temperatureType);
h801434438.port(human_input_port);
h801434438.action((Event e)->{
final Set_temperatureMessageType.Set_temperatureMessage set_temperature = (Set_temperatureMessageType.Set_temperatureMessage) e;
PIM_tmrature_var = (double) (set_temperature.t);
});

Transition h938033530 = new Transition();
h938033530.from(state_PIM_PIM_behavior_Running_Off).to(state_PIM_PIM_behavior_Running_Off);
h938033530.event(temperatureType);
h938033530.port(get_sensor_port);
h938033530.action((Event e)->{
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
if(getPIM_current_temp_var() < temperature.t) {
sendSwitchOff_via_request_actuator((int) (getPIM_switch_id_var()));

}
PIM_current_temp_var = (double) (temperature.t);
PIM_last_temp_1_var = (double) (getPIM_last_temp_2_var());
PIM_last_temp_2_var = (double) (getPIM_last_temp_3_var());
PIM_last_temp_3_var = (double) (getPIM_last_temp_4_var());
PIM_last_temp_4_var = (double) (getPIM_last_temp_5_var());
PIM_last_temp_5_var = (double) (getPIM_current_temp_var());
});

final CompositeState state_PIM_PIM_behavior_Running = new CompositeState("Running");
state_PIM_PIM_behavior_Running.add(state_PIM_PIM_behavior_Running_Thermostat);
state_PIM_PIM_behavior_Running.add(state_PIM_PIM_behavior_Running_On);
state_PIM_PIM_behavior_Running.add(state_PIM_PIM_behavior_Running_Off);
state_PIM_PIM_behavior_Running.keepHistory(true);
state_PIM_PIM_behavior_Running.initial(state_PIM_PIM_behavior_Running_Thermostat);
return state_PIM_PIM_behavior_Running;
}

private CompositeState buildPIM_PIM_behavior_Running_Thermostat(){
final AtomicState state_PIM_PIM_behavior_Running_Thermostat_TemprDecide = new AtomicState("TemprDecide");
final AtomicState state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease = new AtomicState("TemprIncrease");
state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease.onEntry(()->{
sendTimer_start_via_guard_temperature((int) (65000));
});
state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease.onExit(()->{
sendTimer_cancel_via_guard_temperature();
});

final AtomicState state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease = new AtomicState("TemprDecrease");
state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease.onEntry(()->{
sendTimer_start_via_guard_temperature((int) (65000));
});
state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease.onExit(()->{
sendTimer_cancel_via_guard_temperature();
});

Transition h154971426 = new Transition();
h154971426.from(state_PIM_PIM_behavior_Running_Thermostat_TemprDecide).to(state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease);
h154971426.guard((Event e)->{
return getPIM_current_temp_var() >= getPIM_tmrature_var() - getPIM_delta_var();
});

h154971426.action((Event e)->{
sendSwitchOff_via_request_actuator((int) (getPIM_switch_id_var()));
});

Transition h1347498177 = new Transition();
h1347498177.from(state_PIM_PIM_behavior_Running_Thermostat_TemprDecide).to(state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease);
h1347498177.guard((Event e)->{
return getPIM_current_temp_var() < getPIM_tmrature_var() - getPIM_delta_var();
});

h1347498177.action((Event e)->{
sendSwitchOn_via_request_actuator((int) (getPIM_switch_id_var()));
});

Transition h1455337291 = new Transition();
h1455337291.from(state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease).to(state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease);
h1455337291.event(temperatureType);
h1455337291.guard((Event e)->{
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
return temperature.t + getPIM_current_average_diff_var() * getPIM_warming_time_var() <= getPIM_tmrature_var() + getPIM_delta_var();
});

h1455337291.port(get_sensor_port);
h1455337291.action((Event e)->{
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
PIM_current_average_diff_var = (double) ((getPIM_last_temp_5_var() - getPIM_last_temp_1_var()) / 5);
sendSwitchOn_via_request_actuator((int) (getPIM_switch_id_var()));
PIM_current_temp_var = (double) (temperature.t);
PIM_last_temp_1_var = (double) (getPIM_last_temp_2_var());
PIM_last_temp_2_var = (double) (getPIM_last_temp_3_var());
PIM_last_temp_3_var = (double) (getPIM_last_temp_4_var());
PIM_last_temp_4_var = (double) (getPIM_last_temp_5_var());
PIM_last_temp_5_var = (double) (getPIM_current_temp_var());
});

Transition h555139073 = new Transition();
h555139073.from(state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease).to(state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease);
h555139073.event(temperatureType);
h555139073.guard((Event e)->{
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
return temperature.t + getPIM_current_average_diff_var() * getPIM_warming_time_var() > getPIM_tmrature_var() + getPIM_delta_var();
});

h555139073.port(get_sensor_port);
h555139073.action((Event e)->{
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
PIM_current_average_diff_var = (double) ((getPIM_last_temp_5_var() - getPIM_last_temp_1_var()) / 5);
PIM_last_temp_1_var = (double) (getPIM_last_temp_2_var());
PIM_last_temp_2_var = (double) (getPIM_last_temp_3_var());
PIM_last_temp_3_var = (double) (getPIM_last_temp_4_var());
PIM_last_temp_4_var = (double) (getPIM_last_temp_5_var());
PIM_last_temp_5_var = (double) (getPIM_current_temp_var());
});

Transition h947395626 = new Transition();
h947395626.from(state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease).to(state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease);
h947395626.event(timer_timeoutType);
h947395626.port(guard_temperature_port);
h947395626.action((Event e)->{
sendPrompt_via_human_output((String) ("WARNING: @TemprIncrease - temperature measurement is delayed"));
});

Transition h1561602118 = new Transition();
h1561602118.from(state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease).to(state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease);
h1561602118.event(set_deltaType);
h1561602118.port(human_input_port);
h1561602118.action((Event e)->{
final Set_deltaMessageType.Set_deltaMessage set_delta = (Set_deltaMessageType.Set_deltaMessage) e;
PIM_delta_var = (double) (set_delta.dlta);
});

Transition h634858527 = new Transition();
h634858527.from(state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease).to(state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease);
h634858527.event(fetch_tempType);
h634858527.port(human_input_port);
h634858527.action((Event e)->{
sendTemperature_via_human_output((int) (getPIM_thermo_id_var()), (String) ("temperature "), (double) (getPIM_current_temp_var()));
});

Transition h1477894601 = new Transition();
h1477894601.from(state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease).to(state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease);
h1477894601.event(temperatureType);
h1477894601.guard((Event e)->{
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
return temperature.t + getPIM_current_average_diff_var() * getPIM_cooling_time_var() >= getPIM_tmrature_var() + getPIM_delta_var();
});

h1477894601.port(get_sensor_port);
h1477894601.action((Event e)->{
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
PIM_current_average_diff_var = (double) ((getPIM_last_temp_5_var() - getPIM_last_temp_1_var()) / 5);
sendSwitchOff_via_request_actuator((int) (getPIM_switch_id_var()));
PIM_current_temp_var = (double) (temperature.t);
PIM_last_temp_1_var = (double) (getPIM_last_temp_2_var());
PIM_last_temp_2_var = (double) (getPIM_last_temp_3_var());
PIM_last_temp_3_var = (double) (getPIM_last_temp_4_var());
PIM_last_temp_4_var = (double) (getPIM_last_temp_5_var());
PIM_last_temp_5_var = (double) (getPIM_current_temp_var());
});

Transition h777562948 = new Transition();
h777562948.from(state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease).to(state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease);
h777562948.event(temperatureType);
h777562948.guard((Event e)->{
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
return temperature.t + getPIM_current_average_diff_var() * getPIM_cooling_time_var() < getPIM_tmrature_var() - getPIM_delta_var();
});

h777562948.port(get_sensor_port);
h777562948.action((Event e)->{
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
PIM_current_average_diff_var = (double) ((getPIM_last_temp_5_var() - getPIM_last_temp_1_var()) / 5);
sendSwitchOn_via_request_actuator((int) (getPIM_switch_id_var()));
PIM_current_temp_var = (double) (temperature.t);
PIM_last_temp_1_var = (double) (getPIM_last_temp_2_var());
PIM_last_temp_2_var = (double) (getPIM_last_temp_3_var());
PIM_last_temp_3_var = (double) (getPIM_last_temp_4_var());
PIM_last_temp_4_var = (double) (getPIM_last_temp_5_var());
PIM_last_temp_5_var = (double) (getPIM_current_temp_var());
});

Transition h1202112345 = new Transition();
h1202112345.from(state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease).to(state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease);
h1202112345.event(timer_timeoutType);
h1202112345.port(guard_temperature_port);
h1202112345.action((Event e)->{
sendPrompt_via_human_output((String) ("WARNING: @TemprDecrease - temperature measurement is delayed"));
});

Transition h1002450180 = new Transition();
h1002450180.from(state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease).to(state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease);
h1002450180.event(set_deltaType);
h1002450180.port(human_input_port);
h1002450180.action((Event e)->{
final Set_deltaMessageType.Set_deltaMessage set_delta = (Set_deltaMessageType.Set_deltaMessage) e;
PIM_delta_var = (double) (set_delta.dlta);
});

Transition h1999830471 = new Transition();
h1999830471.from(state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease).to(state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease);
h1999830471.event(fetch_tempType);
h1999830471.port(human_input_port);
h1999830471.action((Event e)->{
sendTemperature_via_human_output((int) (getPIM_thermo_id_var()), (String) ("temperature "), (double) (getPIM_current_temp_var()));
});

final CompositeState state_PIM_PIM_behavior_Running_Thermostat = new CompositeState("Thermostat");
state_PIM_PIM_behavior_Running_Thermostat.onEntry(()->{
});
state_PIM_PIM_behavior_Running_Thermostat.add(state_PIM_PIM_behavior_Running_Thermostat_TemprDecide);
state_PIM_PIM_behavior_Running_Thermostat.add(state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease);
state_PIM_PIM_behavior_Running_Thermostat.add(state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease);
state_PIM_PIM_behavior_Running_Thermostat.initial(state_PIM_PIM_behavior_Running_Thermostat_TemprDecide);
return state_PIM_PIM_behavior_Running_Thermostat;
}

public Component buildBehavior(String session, Component root) {
if (root == null) {
//Init ports
get_sensor_port = new Port("get_sensor", this);
request_sensor_port = new Port("request_sensor", this);
request_actuator_port = new Port("request_actuator", this);
human_input_port = new Port("human_input", this);
human_output_port = new Port("human_output", this);
guard_temperature_port = new Port("guard_temperature", this);
guard_human_port = new Port("guard_human", this);
} else {
get_sensor_port = ((PIM)root).get_sensor_port;
request_sensor_port = ((PIM)root).request_sensor_port;
request_actuator_port = ((PIM)root).request_actuator_port;
human_input_port = ((PIM)root).human_input_port;
human_output_port = ((PIM)root).human_output_port;
guard_temperature_port = ((PIM)root).guard_temperature_port;
guard_human_port = ((PIM)root).guard_human_port;
}
if (session == null){
//Init state machine
behavior = buildPIM_PIM_behavior();
}
return this;
}

}
