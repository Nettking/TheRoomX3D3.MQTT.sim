/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated;

import no.sintef.jasm.*;
import no.sintef.jasm.ext.*;

import org.thingml.generated.api.*;
import org.thingml.generated.messages.*;

import java.util.*;

/**
 * Definition for type : PIM
 **/
public class PIM extends Component implements IPIM_human_input, IPIM_get_sensor, IPIM_guard_temperature, IPIM_guard_human {

private boolean debug = false;
public boolean isDebug() {return debug;}
public void setDebug(boolean debug) {this.debug = debug;}
public String toString() {
String result = "instance " + getName() + "\n";
result += "\ttmrature = " + PIM_tmrature_var;
result += "\tthermo_id = " + PIM_thermo_id_var;
result += "\tswitch_id = " + PIM_switch_id_var;
result += "\tdelta = " + PIM_delta_var;
result += "\tcurrent_temp = " + PIM_current_temp_var;
result += "\tlast_temp_1 = " + PIM_last_temp_1_var;
result += "\tlast_temp_2 = " + PIM_last_temp_2_var;
result += "\tlast_temp_3 = " + PIM_last_temp_3_var;
result += "\tlast_temp_4 = " + PIM_last_temp_4_var;
result += "\tlast_temp_5 = " + PIM_last_temp_5_var;
result += "\tcurrent_average_diff = " + PIM_current_average_diff_var;
result += "\twarming_time = " + PIM_warming_time_var;
result += "\tcooling_time = " + PIM_cooling_time_var;
result += "\tbuffer_size = " + PIM_buffer_size_var;
result += "\ti = " + PIM_i_var;
result += "\ttemp_buffer = " + PIM_temp_buffer_var;
result += "\tbuffer_full = " + PIM_buffer_full_var;
result += "\tbuffer_rear = " + PIM_buffer_rear_var;
result += "\tbuffer_front = " + PIM_buffer_front_var;
result += "";
return result;
}

public synchronized void temperature_via_get_sensor(int TemperatureMsg_temperature_id_var, String TemperatureMsg_temperature_txt_var, double TemperatureMsg_temperature_t_var){
final Event _msg = temperatureType.instantiate(TemperatureMsg_temperature_id_var, TemperatureMsg_temperature_txt_var, TemperatureMsg_temperature_t_var);
_msg.setPort(get_sensor_port);
receive(_msg);
}

public synchronized void SwitchOn_via_human_input(int OnOffMsg_SwitchOn_did_var){
final Event _msg = SwitchOnType.instantiate(OnOffMsg_SwitchOn_did_var);
_msg.setPort(human_input_port);
receive(_msg);
}

public synchronized void SwitchOff_via_human_input(int OnOffMsg_SwitchOff_did_var){
final Event _msg = SwitchOffType.instantiate(OnOffMsg_SwitchOff_did_var);
_msg.setPort(human_input_port);
receive(_msg);
}

public synchronized void set_temperature_via_human_input(double TemperatureMsg_set_temperature_t_var){
final Event _msg = set_temperatureType.instantiate(TemperatureMsg_set_temperature_t_var);
_msg.setPort(human_input_port);
receive(_msg);
}

public synchronized void set_delta_via_human_input(double TemperatureMsg_set_delta_dlta_var){
final Event _msg = set_deltaType.instantiate(TemperatureMsg_set_delta_dlta_var);
_msg.setPort(human_input_port);
receive(_msg);
}

public synchronized void fetch_temp_via_human_input(){
final Event _msg = fetch_tempType.instantiate();
_msg.setPort(human_input_port);
receive(_msg);
}

public synchronized void timer_timeout_via_guard_temperature(){
final Event _msg = timer_timeoutType.instantiate();
_msg.setPort(guard_temperature_port);
receive(_msg);
}

public synchronized void timer_timeout_via_guard_human(){
final Event _msg = timer_timeoutType.instantiate();
_msg.setPort(guard_human_port);
receive(_msg);
}

private void sendAdd_thermometer_via_request_sensor(int TemperatureMsg_add_thermometer_id_var, String TemperatureMsg_add_thermometer_txt_var){
request_sensor_port.send(add_thermometerType.instantiate(TemperatureMsg_add_thermometer_id_var, TemperatureMsg_add_thermometer_txt_var));
}

private void sendAdd_device_via_request_actuator(int DeviceGeneral_add_device_did_var){
request_actuator_port.send(add_deviceType.instantiate(DeviceGeneral_add_device_did_var));
}

private void sendSwitchOn_via_request_actuator(int OnOffMsg_SwitchOn_did_var){
request_actuator_port.send(SwitchOnType.instantiate(OnOffMsg_SwitchOn_did_var));
}

private void sendSwitchOff_via_request_actuator(int OnOffMsg_SwitchOff_did_var){
request_actuator_port.send(SwitchOffType.instantiate(OnOffMsg_SwitchOff_did_var));
}

private void sendTemperature_via_human_output(int TemperatureMsg_temperature_id_var, String TemperatureMsg_temperature_txt_var, double TemperatureMsg_temperature_t_var){
human_output_port.send(temperatureType.instantiate(TemperatureMsg_temperature_id_var, TemperatureMsg_temperature_txt_var, TemperatureMsg_temperature_t_var));
}

private void sendPrompt_via_human_output(String GeneralMsg_prompt_txt_var){
human_output_port.send(promptType.instantiate(GeneralMsg_prompt_txt_var));
}

private void sendTimer_start_via_guard_temperature(int TimerMsgs_timer_start_delay_var){
guard_temperature_port.send(timer_startType.instantiate(TimerMsgs_timer_start_delay_var));
}

private void sendTimer_cancel_via_guard_temperature(){
guard_temperature_port.send(timer_cancelType.instantiate());
}

private void sendTimer_start_via_guard_human(int TimerMsgs_timer_start_delay_var){
guard_human_port.send(timer_startType.instantiate(TimerMsgs_timer_start_delay_var));
}

private void sendTimer_cancel_via_guard_human(){
guard_human_port.send(timer_cancelType.instantiate());
}

//Attributes
private int PIM_buffer_front_var;
private double PIM_current_temp_var;
private double PIM_last_temp_4_var;
private double PIM_last_temp_3_var;
private int PIM_thermo_id_var;
private double PIM_last_temp_1_var;
private int PIM_buffer_size_var;
private double PIM_delta_var;
private double PIM_tmrature_var;
private double PIM_current_average_diff_var;
private double PIM_cooling_time_var;
private int PIM_switch_id_var;
private double PIM_last_temp_5_var;
private boolean PIM_buffer_full_var;
private int PIM_buffer_rear_var;
private double[] PIM_temp_buffer_var;
private double PIM_last_temp_2_var;
private double PIM_warming_time_var;
private int PIM_i_var;
//Ports
private Port get_sensor_port;
private Port request_sensor_port;
private Port request_actuator_port;
private Port human_input_port;
private Port human_output_port;
private Port guard_temperature_port;
private Port guard_human_port;
//Message types
protected final PromptMessageType promptType = new PromptMessageType();
protected final SensorinfoMessageType sensorinfoType = new SensorinfoMessageType();
protected final DeviceinfoMessageType deviceinfoType = new DeviceinfoMessageType();
protected final TemperatureMessageType temperatureType = new TemperatureMessageType();
protected final Add_thermometerMessageType add_thermometerType = new Add_thermometerMessageType();
protected final Set_temperatureMessageType set_temperatureType = new Set_temperatureMessageType();
protected final Set_deltaMessageType set_deltaType = new Set_deltaMessageType();
protected final Fetch_tempMessageType fetch_tempType = new Fetch_tempMessageType();
protected final Add_deviceMessageType add_deviceType = new Add_deviceMessageType();
protected final SwitchOnMessageType SwitchOnType = new SwitchOnMessageType();
protected final SwitchOffMessageType SwitchOffType = new SwitchOffMessageType();
protected final Timer_startMessageType timer_startType = new Timer_startMessageType();
protected final Timer_cancelMessageType timer_cancelType = new Timer_cancelMessageType();
protected final Timer_timeoutMessageType timer_timeoutType = new Timer_timeoutMessageType();
protected final LuminanceMessageType luminanceType = new LuminanceMessageType();
protected final Add_lightsensorMessageType add_lightsensorType = new Add_lightsensorMessageType();
protected final Set_luminanceMessageType set_luminanceType = new Set_luminanceMessageType();
protected final Set_day_startMessageType set_day_startType = new Set_day_startMessageType();
protected final Set_night_startMessageType set_night_startType = new Set_night_startMessageType();
//Empty Constructor
public PIM() {
super();
}

//Getters and Setters for non readonly/final attributes
public int getPIM_buffer_front_var() {
return PIM_buffer_front_var;
}

public void setPIM_buffer_front_var(int PIM_buffer_front_var) {
this.PIM_buffer_front_var = PIM_buffer_front_var;
}

public PIM initPIM_buffer_front_var(int PIM_buffer_front_var) {
this.PIM_buffer_front_var = PIM_buffer_front_var;
return this;
}

public double getPIM_current_temp_var() {
return PIM_current_temp_var;
}

public void setPIM_current_temp_var(double PIM_current_temp_var) {
this.PIM_current_temp_var = PIM_current_temp_var;
}

public PIM initPIM_current_temp_var(double PIM_current_temp_var) {
this.PIM_current_temp_var = PIM_current_temp_var;
return this;
}

public double getPIM_last_temp_4_var() {
return PIM_last_temp_4_var;
}

public void setPIM_last_temp_4_var(double PIM_last_temp_4_var) {
this.PIM_last_temp_4_var = PIM_last_temp_4_var;
}

public PIM initPIM_last_temp_4_var(double PIM_last_temp_4_var) {
this.PIM_last_temp_4_var = PIM_last_temp_4_var;
return this;
}

public double getPIM_last_temp_3_var() {
return PIM_last_temp_3_var;
}

public void setPIM_last_temp_3_var(double PIM_last_temp_3_var) {
this.PIM_last_temp_3_var = PIM_last_temp_3_var;
}

public PIM initPIM_last_temp_3_var(double PIM_last_temp_3_var) {
this.PIM_last_temp_3_var = PIM_last_temp_3_var;
return this;
}

public int getPIM_thermo_id_var() {
return PIM_thermo_id_var;
}

public void setPIM_thermo_id_var(int PIM_thermo_id_var) {
this.PIM_thermo_id_var = PIM_thermo_id_var;
}

public PIM initPIM_thermo_id_var(int PIM_thermo_id_var) {
this.PIM_thermo_id_var = PIM_thermo_id_var;
return this;
}

public double getPIM_last_temp_1_var() {
return PIM_last_temp_1_var;
}

public void setPIM_last_temp_1_var(double PIM_last_temp_1_var) {
this.PIM_last_temp_1_var = PIM_last_temp_1_var;
}

public PIM initPIM_last_temp_1_var(double PIM_last_temp_1_var) {
this.PIM_last_temp_1_var = PIM_last_temp_1_var;
return this;
}

public int getPIM_buffer_size_var() {
return PIM_buffer_size_var;
}

public void setPIM_buffer_size_var(int PIM_buffer_size_var) {
this.PIM_buffer_size_var = PIM_buffer_size_var;
}

public PIM initPIM_buffer_size_var(int PIM_buffer_size_var) {
this.PIM_buffer_size_var = PIM_buffer_size_var;
return this;
}

public double getPIM_delta_var() {
return PIM_delta_var;
}

public void setPIM_delta_var(double PIM_delta_var) {
this.PIM_delta_var = PIM_delta_var;
}

public PIM initPIM_delta_var(double PIM_delta_var) {
this.PIM_delta_var = PIM_delta_var;
return this;
}

public double getPIM_tmrature_var() {
return PIM_tmrature_var;
}

public void setPIM_tmrature_var(double PIM_tmrature_var) {
this.PIM_tmrature_var = PIM_tmrature_var;
}

public PIM initPIM_tmrature_var(double PIM_tmrature_var) {
this.PIM_tmrature_var = PIM_tmrature_var;
return this;
}

public double getPIM_current_average_diff_var() {
return PIM_current_average_diff_var;
}

public void setPIM_current_average_diff_var(double PIM_current_average_diff_var) {
this.PIM_current_average_diff_var = PIM_current_average_diff_var;
}

public PIM initPIM_current_average_diff_var(double PIM_current_average_diff_var) {
this.PIM_current_average_diff_var = PIM_current_average_diff_var;
return this;
}

public double getPIM_cooling_time_var() {
return PIM_cooling_time_var;
}

public void setPIM_cooling_time_var(double PIM_cooling_time_var) {
this.PIM_cooling_time_var = PIM_cooling_time_var;
}

public PIM initPIM_cooling_time_var(double PIM_cooling_time_var) {
this.PIM_cooling_time_var = PIM_cooling_time_var;
return this;
}

public int getPIM_switch_id_var() {
return PIM_switch_id_var;
}

public void setPIM_switch_id_var(int PIM_switch_id_var) {
this.PIM_switch_id_var = PIM_switch_id_var;
}

public PIM initPIM_switch_id_var(int PIM_switch_id_var) {
this.PIM_switch_id_var = PIM_switch_id_var;
return this;
}

public double getPIM_last_temp_5_var() {
return PIM_last_temp_5_var;
}

public void setPIM_last_temp_5_var(double PIM_last_temp_5_var) {
this.PIM_last_temp_5_var = PIM_last_temp_5_var;
}

public PIM initPIM_last_temp_5_var(double PIM_last_temp_5_var) {
this.PIM_last_temp_5_var = PIM_last_temp_5_var;
return this;
}

public boolean getPIM_buffer_full_var() {
return PIM_buffer_full_var;
}

public void setPIM_buffer_full_var(boolean PIM_buffer_full_var) {
this.PIM_buffer_full_var = PIM_buffer_full_var;
}

public PIM initPIM_buffer_full_var(boolean PIM_buffer_full_var) {
this.PIM_buffer_full_var = PIM_buffer_full_var;
return this;
}

public int getPIM_buffer_rear_var() {
return PIM_buffer_rear_var;
}

public void setPIM_buffer_rear_var(int PIM_buffer_rear_var) {
this.PIM_buffer_rear_var = PIM_buffer_rear_var;
}

public PIM initPIM_buffer_rear_var(int PIM_buffer_rear_var) {
this.PIM_buffer_rear_var = PIM_buffer_rear_var;
return this;
}

public double[] getPIM_temp_buffer_var() {
return PIM_temp_buffer_var;
}

public void setPIM_temp_buffer_var(double[] PIM_temp_buffer_var) {
this.PIM_temp_buffer_var = PIM_temp_buffer_var;
}

public PIM initPIM_temp_buffer_var(double[] PIM_temp_buffer_var) {
this.PIM_temp_buffer_var = PIM_temp_buffer_var;
return this;
}

public double getPIM_last_temp_2_var() {
return PIM_last_temp_2_var;
}

public void setPIM_last_temp_2_var(double PIM_last_temp_2_var) {
this.PIM_last_temp_2_var = PIM_last_temp_2_var;
}

public PIM initPIM_last_temp_2_var(double PIM_last_temp_2_var) {
this.PIM_last_temp_2_var = PIM_last_temp_2_var;
return this;
}

public double getPIM_warming_time_var() {
return PIM_warming_time_var;
}

public void setPIM_warming_time_var(double PIM_warming_time_var) {
this.PIM_warming_time_var = PIM_warming_time_var;
}

public PIM initPIM_warming_time_var(double PIM_warming_time_var) {
this.PIM_warming_time_var = PIM_warming_time_var;
return this;
}

public int getPIM_i_var() {
return PIM_i_var;
}

public void setPIM_i_var(int PIM_i_var) {
this.PIM_i_var = PIM_i_var;
}

public PIM initPIM_i_var(int PIM_i_var) {
this.PIM_i_var = PIM_i_var;
return this;
}

//Getters for Ports
public Port getGet_sensor_port() {
return get_sensor_port;
}
public Port getRequest_sensor_port() {
return request_sensor_port;
}
public Port getRequest_actuator_port() {
return request_actuator_port;
}
public Port getHuman_input_port() {
return human_input_port;
}
public Port getHuman_output_port() {
return human_output_port;
}
public Port getGuard_temperature_port() {
return guard_temperature_port;
}
public Port getGuard_human_port() {
return guard_human_port;
}
private CompositeState buildPIM_PIM_behavior(){
final CompositeState state_PIM_PIM_behavior_Build = buildPIM_PIM_behavior_Build();
final CompositeState state_PIM_PIM_behavior_Running = buildPIM_PIM_behavior_Running();
Handler h921834973 = new Handler();
h921834973.from(state_PIM_PIM_behavior_Build);
h921834973.event(set_deltaType);
h921834973.port(human_input_port);
h921834973.action((Event e)->{
final Set_deltaMessageType.Set_deltaMessage set_delta = (Set_deltaMessageType.Set_deltaMessage) e;
PIM_delta_var = (double) (set_delta.dlta);
});

Handler h1580875337 = new Handler();
h1580875337.from(state_PIM_PIM_behavior_Build);
h1580875337.event(fetch_tempType);
h1580875337.port(human_input_port);
h1580875337.action((Event e)->{
sendTemperature_via_human_output((int) (getPIM_thermo_id_var()), (String) ("temperature "), (double) (getPIM_current_temp_var()));
});

Handler h1844977334 = new Handler();
h1844977334.from(state_PIM_PIM_behavior_Build);
h1844977334.event(temperatureType);
h1844977334.port(get_sensor_port);
h1844977334.action((Event e)->{
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
PIM_temp_buffer_var[(int)(getPIM_buffer_rear_var())] = (double) (temperature.t);
PIM_buffer_rear_var = (int) ((getPIM_buffer_rear_var() + 1) % getPIM_buffer_size_var());
if(getPIM_buffer_rear_var() == getPIM_buffer_front_var()) {
PIM_buffer_front_var = (int) ((getPIM_buffer_front_var() + 1) % getPIM_buffer_size_var());

}
});

Transition h665113852 = new Transition();
h665113852.from(state_PIM_PIM_behavior_Build).to(state_PIM_PIM_behavior_Running);
h665113852.event(set_temperatureType);
h665113852.port(human_input_port);
h665113852.action((Event e)->{
final Set_temperatureMessageType.Set_temperatureMessage set_temperature = (Set_temperatureMessageType.Set_temperatureMessage) e;
PIM_tmrature_var = (double) (set_temperature.t);
sendPrompt_via_human_output((String) ("Now entering thermostat. Please give temperature observations"));
});

Transition h49954890 = new Transition();
h49954890.from(state_PIM_PIM_behavior_Build).to(state_PIM_PIM_behavior_Build);
h49954890.event(timer_timeoutType);
h49954890.port(guard_human_port);
h49954890.action((Event e)->{
sendPrompt_via_human_output((String) ("Please continue doing the build of the temperature control"));
});

Handler h729186423 = new Handler();
h729186423.from(state_PIM_PIM_behavior_Running);
h729186423.event(fetch_tempType);
h729186423.port(human_input_port);
h729186423.action((Event e)->{
sendTemperature_via_human_output((int) (getPIM_thermo_id_var()), (String) ("temperature "), (double) (getPIM_current_temp_var()));
});

Transition h1740880791 = new Transition();
h1740880791.from(state_PIM_PIM_behavior_Running).to(state_PIM_PIM_behavior_Running);
h1740880791.event(set_deltaType);
h1740880791.port(human_input_port);
h1740880791.action((Event e)->{
final Set_deltaMessageType.Set_deltaMessage set_delta = (Set_deltaMessageType.Set_deltaMessage) e;
PIM_delta_var = (double) (set_delta.dlta);
});

Transition h819925918 = new Transition();
h819925918.from(state_PIM_PIM_behavior_Running).to(state_PIM_PIM_behavior_Running);
h819925918.event(SwitchOnType);
h819925918.port(human_input_port);
h819925918.action((Event e)->{
final SwitchOnMessageType.SwitchOnMessage SwitchOn = (SwitchOnMessageType.SwitchOnMessage) e;
sendPrompt_via_human_output((String) ("INTERNAL ERROR: Impossible SwitchOn at PIM.Running"));
});

Transition h744131960 = new Transition();
h744131960.from(state_PIM_PIM_behavior_Running).to(state_PIM_PIM_behavior_Running);
h744131960.event(SwitchOffType);
h744131960.port(human_input_port);
h744131960.action((Event e)->{
final SwitchOffMessageType.SwitchOffMessage SwitchOff = (SwitchOffMessageType.SwitchOffMessage) e;
sendPrompt_via_human_output((String) ("INTERNAL ERROR: Impossible SwitchOff at PIM.Running"));
});

Transition h852934788 = new Transition();
h852934788.from(state_PIM_PIM_behavior_Running).to(state_PIM_PIM_behavior_Running);
h852934788.event(set_temperatureType);
h852934788.port(human_input_port);
h852934788.action((Event e)->{
final Set_temperatureMessageType.Set_temperatureMessage set_temperature = (Set_temperatureMessageType.Set_temperatureMessage) e;
sendPrompt_via_human_output((String) ("INTERNAL ERROR: Impossible set_temperature at PIM.Running"));
});

Transition h1830533193 = new Transition();
h1830533193.from(state_PIM_PIM_behavior_Running).to(state_PIM_PIM_behavior_Running);
h1830533193.event(temperatureType);
h1830533193.port(get_sensor_port);
h1830533193.action((Event e)->{
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
sendPrompt_via_human_output((String) ("INTERNAL ERROR: temperature received at PIM.Running"));
PIM_current_temp_var = (double) (temperature.t);
});

final CompositeState state_PIM_PIM_behavior = new CompositeState("PIM_behavior");
state_PIM_PIM_behavior.onEntry(()->{
System.out.print(""+(("Running The Room X3D3.MQTT.sim\n")));
});
state_PIM_PIM_behavior.add(state_PIM_PIM_behavior_Build);
state_PIM_PIM_behavior.add(state_PIM_PIM_behavior_Running);
state_PIM_PIM_behavior.initial(state_PIM_PIM_behavior_Build);
return state_PIM_PIM_behavior;
}

private CompositeState buildPIM_PIM_behavior_Build(){
final AtomicState state_PIM_PIM_behavior_Build_SetThermostat = new AtomicState("SetThermostat");
state_PIM_PIM_behavior_Build_SetThermostat.onEntry(()->{
sendAdd_thermometer_via_request_sensor((int) (getPIM_thermo_id_var()), (String) ("t"));
sendAdd_device_via_request_actuator((int) (getPIM_switch_id_var()));
});
Transition h808422884 = new Transition();
h808422884.from(state_PIM_PIM_behavior_Build_SetThermostat).to(state_PIM_PIM_behavior_Build_SetThermostat);
h808422884.event(SwitchOnType);
h808422884.port(human_input_port);
h808422884.action((Event e)->{
final SwitchOnMessageType.SwitchOnMessage SwitchOn = (SwitchOnMessageType.SwitchOnMessage) e;
sendPrompt_via_human_output((String) ("Please set temperature for Thermostat"));
});

Transition h988764339 = new Transition();
h988764339.from(state_PIM_PIM_behavior_Build_SetThermostat).to(state_PIM_PIM_behavior_Build_SetThermostat);
h988764339.event(SwitchOffType);
h988764339.port(human_input_port);
h988764339.action((Event e)->{
final SwitchOffMessageType.SwitchOffMessage SwitchOff = (SwitchOffMessageType.SwitchOffMessage) e;
sendPrompt_via_human_output((String) ("Please set temperature for Thermostat"));
});

final CompositeState state_PIM_PIM_behavior_Build = new CompositeState("Build");
state_PIM_PIM_behavior_Build.onEntry(()->{
sendTimer_start_via_guard_human((int) (30000));
});
state_PIM_PIM_behavior_Build.onExit(()->{
sendTimer_cancel_via_guard_human();
});

state_PIM_PIM_behavior_Build.add(state_PIM_PIM_behavior_Build_SetThermostat);
state_PIM_PIM_behavior_Build.keepHistory(true);
state_PIM_PIM_behavior_Build.initial(state_PIM_PIM_behavior_Build_SetThermostat);
return state_PIM_PIM_behavior_Build;
}

private CompositeState buildPIM_PIM_behavior_Running(){
final CompositeState state_PIM_PIM_behavior_Running_Thermostat = buildPIM_PIM_behavior_Running_Thermostat();
final AtomicState state_PIM_PIM_behavior_Running_On = new AtomicState("On");
final AtomicState state_PIM_PIM_behavior_Running_Off = new AtomicState("Off");
Transition h697650316 = new Transition();
h697650316.from(state_PIM_PIM_behavior_Running_Thermostat).to(state_PIM_PIM_behavior_Running_On);
h697650316.event(SwitchOnType);
h697650316.port(human_input_port);
h697650316.action((Event e)->{
final SwitchOnMessageType.SwitchOnMessage SwitchOn = (SwitchOnMessageType.SwitchOnMessage) e;
sendSwitchOn_via_request_actuator((int) (SwitchOn.did));
});

Transition h1725157277 = new Transition();
h1725157277.from(state_PIM_PIM_behavior_Running_Thermostat).to(state_PIM_PIM_behavior_Running_Off);
h1725157277.event(SwitchOffType);
h1725157277.port(human_input_port);
h1725157277.action((Event e)->{
final SwitchOffMessageType.SwitchOffMessage SwitchOff = (SwitchOffMessageType.SwitchOffMessage) e;
sendSwitchOff_via_request_actuator((int) (SwitchOff.did));
});

Transition h1755387655 = new Transition();
h1755387655.from(state_PIM_PIM_behavior_Running_Thermostat).to(state_PIM_PIM_behavior_Running_Thermostat);
h1755387655.event(set_temperatureType);
h1755387655.port(human_input_port);
h1755387655.action((Event e)->{
final Set_temperatureMessageType.Set_temperatureMessage set_temperature = (Set_temperatureMessageType.Set_temperatureMessage) e;
PIM_tmrature_var = (double) (set_temperature.t);
System.out.println(""+(("Changing temp to: ")));
System.out.println(""+((getPIM_tmrature_var())));
});

Transition h778550896 = new Transition();
h778550896.from(state_PIM_PIM_behavior_Running_On).to(state_PIM_PIM_behavior_Running_Off);
h778550896.event(SwitchOffType);
h778550896.port(human_input_port);
h778550896.action((Event e)->{
final SwitchOffMessageType.SwitchOffMessage SwitchOff = (SwitchOffMessageType.SwitchOffMessage) e;
sendSwitchOff_via_request_actuator((int) (SwitchOff.did));
});

Transition h1103590470 = new Transition();
h1103590470.from(state_PIM_PIM_behavior_Running_On).to(state_PIM_PIM_behavior_Running_On);
h1103590470.event(SwitchOnType);
h1103590470.port(human_input_port);
h1103590470.action((Event e)->{
final SwitchOnMessageType.SwitchOnMessage SwitchOn = (SwitchOnMessageType.SwitchOnMessage) e;
sendSwitchOn_via_request_actuator((int) (SwitchOn.did));
});

Transition h1490104600 = new Transition();
h1490104600.from(state_PIM_PIM_behavior_Running_On).to(state_PIM_PIM_behavior_Running_Thermostat);
h1490104600.event(set_temperatureType);
h1490104600.port(human_input_port);
h1490104600.action((Event e)->{
final Set_temperatureMessageType.Set_temperatureMessage set_temperature = (Set_temperatureMessageType.Set_temperatureMessage) e;
PIM_tmrature_var = (double) (set_temperature.t);
});

Transition h1514485711 = new Transition();
h1514485711.from(state_PIM_PIM_behavior_Running_On).to(state_PIM_PIM_behavior_Running_On);
h1514485711.event(temperatureType);
h1514485711.port(get_sensor_port);
h1514485711.action((Event e)->{
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
PIM_temp_buffer_var[(int)(getPIM_buffer_rear_var())] = (double) (temperature.t);
PIM_buffer_rear_var = (int) ((getPIM_buffer_rear_var() + 1) % getPIM_buffer_size_var());
if(getPIM_buffer_rear_var() == getPIM_buffer_front_var()) {
PIM_buffer_front_var = (int) ((getPIM_buffer_front_var() + 1) % getPIM_buffer_size_var());

}
PIM_current_average_diff_var = (double) ((PIM_temp_buffer_var[(int)(getPIM_buffer_rear_var())] - PIM_temp_buffer_var[(int)(getPIM_buffer_front_var())]) / getPIM_buffer_size_var());
});

Transition h569131324 = new Transition();
h569131324.from(state_PIM_PIM_behavior_Running_Off).to(state_PIM_PIM_behavior_Running_Off);
h569131324.event(SwitchOffType);
h569131324.port(human_input_port);
h569131324.action((Event e)->{
final SwitchOffMessageType.SwitchOffMessage SwitchOff = (SwitchOffMessageType.SwitchOffMessage) e;
sendSwitchOff_via_request_actuator((int) (SwitchOff.did));
});

Transition h1408301551 = new Transition();
h1408301551.from(state_PIM_PIM_behavior_Running_Off).to(state_PIM_PIM_behavior_Running_On);
h1408301551.event(SwitchOnType);
h1408301551.port(human_input_port);
h1408301551.action((Event e)->{
final SwitchOnMessageType.SwitchOnMessage SwitchOn = (SwitchOnMessageType.SwitchOnMessage) e;
sendSwitchOn_via_request_actuator((int) (SwitchOn.did));
});

Transition h2128728105 = new Transition();
h2128728105.from(state_PIM_PIM_behavior_Running_Off).to(state_PIM_PIM_behavior_Running_Thermostat);
h2128728105.event(set_temperatureType);
h2128728105.port(human_input_port);
h2128728105.action((Event e)->{
final Set_temperatureMessageType.Set_temperatureMessage set_temperature = (Set_temperatureMessageType.Set_temperatureMessage) e;
PIM_tmrature_var = (double) (set_temperature.t);
});

Transition h2108262649 = new Transition();
h2108262649.from(state_PIM_PIM_behavior_Running_Off).to(state_PIM_PIM_behavior_Running_Off);
h2108262649.event(temperatureType);
h2108262649.port(get_sensor_port);
h2108262649.action((Event e)->{
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
PIM_temp_buffer_var[(int)(getPIM_buffer_rear_var())] = (double) (temperature.t);
PIM_buffer_rear_var = (int) ((getPIM_buffer_rear_var() + 1) % getPIM_buffer_size_var());
if(getPIM_buffer_rear_var() == getPIM_buffer_front_var()) {
PIM_buffer_front_var = (int) ((getPIM_buffer_front_var() + 1) % getPIM_buffer_size_var());

}
PIM_current_average_diff_var = (double) ((PIM_temp_buffer_var[(int)(getPIM_buffer_rear_var())] - PIM_temp_buffer_var[(int)(getPIM_buffer_front_var())]) / getPIM_buffer_size_var());
});

final CompositeState state_PIM_PIM_behavior_Running = new CompositeState("Running");
state_PIM_PIM_behavior_Running.add(state_PIM_PIM_behavior_Running_Thermostat);
state_PIM_PIM_behavior_Running.add(state_PIM_PIM_behavior_Running_On);
state_PIM_PIM_behavior_Running.add(state_PIM_PIM_behavior_Running_Off);
state_PIM_PIM_behavior_Running.keepHistory(true);
state_PIM_PIM_behavior_Running.initial(state_PIM_PIM_behavior_Running_Thermostat);
return state_PIM_PIM_behavior_Running;
}

private CompositeState buildPIM_PIM_behavior_Running_Thermostat(){
final AtomicState state_PIM_PIM_behavior_Running_Thermostat_TemprDecide = new AtomicState("TemprDecide");
final AtomicState state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease = new AtomicState("TemprIncrease");
state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease.onEntry(()->{
sendTimer_start_via_guard_temperature((int) (65000));
});
state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease.onExit(()->{
sendTimer_cancel_via_guard_temperature();
});

final AtomicState state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease = new AtomicState("TemprDecrease");
state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease.onEntry(()->{
sendTimer_start_via_guard_temperature((int) (65000));
});
state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease.onExit(()->{
sendTimer_cancel_via_guard_temperature();
});

Transition h60468920 = new Transition();
h60468920.from(state_PIM_PIM_behavior_Running_Thermostat_TemprDecide).to(state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease);
h60468920.guard((Event e)->{
return getPIM_current_temp_var() >= getPIM_tmrature_var() - getPIM_delta_var();
});

h60468920.action((Event e)->{
sendSwitchOff_via_request_actuator((int) (getPIM_switch_id_var()));
});

Transition h2022083631 = new Transition();
h2022083631.from(state_PIM_PIM_behavior_Running_Thermostat_TemprDecide).to(state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease);
h2022083631.guard((Event e)->{
return getPIM_current_temp_var() < getPIM_tmrature_var() - getPIM_delta_var();
});

h2022083631.action((Event e)->{
sendSwitchOn_via_request_actuator((int) (getPIM_switch_id_var()));
});

Transition h1959162964 = new Transition();
h1959162964.from(state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease).to(state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease);
h1959162964.event(temperatureType);
h1959162964.guard((Event e)->{
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
return temperature.t + getPIM_current_average_diff_var() * getPIM_warming_time_var() <= getPIM_tmrature_var() + getPIM_delta_var();
});

h1959162964.port(get_sensor_port);
h1959162964.action((Event e)->{
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
PIM_temp_buffer_var[(int)(getPIM_buffer_rear_var())] = (double) (temperature.t);
PIM_buffer_rear_var = (int) ((getPIM_buffer_rear_var() + 1) % getPIM_buffer_size_var());
if(getPIM_buffer_rear_var() == getPIM_buffer_front_var()) {
PIM_buffer_front_var = (int) ((getPIM_buffer_front_var() + 1) % getPIM_buffer_size_var());

}
PIM_current_average_diff_var = (double) ((PIM_temp_buffer_var[(int)(getPIM_buffer_rear_var())] - PIM_temp_buffer_var[(int)(getPIM_buffer_front_var())]) / getPIM_buffer_size_var());
});

Transition h1778968994 = new Transition();
h1778968994.from(state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease).to(state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease);
h1778968994.event(temperatureType);
h1778968994.guard((Event e)->{
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
return temperature.t + getPIM_current_average_diff_var() * getPIM_warming_time_var() > getPIM_tmrature_var() + getPIM_delta_var();
});

h1778968994.port(get_sensor_port);
h1778968994.action((Event e)->{
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
PIM_temp_buffer_var[(int)(getPIM_buffer_rear_var())] = (double) (temperature.t);
PIM_buffer_rear_var = (int) ((getPIM_buffer_rear_var() + 1) % getPIM_buffer_size_var());
if(getPIM_buffer_rear_var() == getPIM_buffer_front_var()) {
PIM_buffer_front_var = (int) ((getPIM_buffer_front_var() + 1) % getPIM_buffer_size_var());

}
PIM_current_average_diff_var = (double) ((PIM_temp_buffer_var[(int)(getPIM_buffer_rear_var())] - PIM_temp_buffer_var[(int)(getPIM_buffer_front_var())]) / getPIM_buffer_size_var());
});

Transition h651588329 = new Transition();
h651588329.from(state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease).to(state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease);
h651588329.event(timer_timeoutType);
h651588329.port(guard_temperature_port);
h651588329.action((Event e)->{
sendPrompt_via_human_output((String) ("WARNING: @TemprIncrease - temperature measurement is delayed"));
});

Transition h2002297267 = new Transition();
h2002297267.from(state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease).to(state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease);
h2002297267.event(set_deltaType);
h2002297267.port(human_input_port);
h2002297267.action((Event e)->{
final Set_deltaMessageType.Set_deltaMessage set_delta = (Set_deltaMessageType.Set_deltaMessage) e;
PIM_delta_var = (double) (set_delta.dlta);
});

Transition h170502549 = new Transition();
h170502549.from(state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease).to(state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease);
h170502549.event(fetch_tempType);
h170502549.port(human_input_port);
h170502549.action((Event e)->{
sendTemperature_via_human_output((int) (getPIM_thermo_id_var()), (String) ("temperature "), (double) (getPIM_current_temp_var()));
});

Transition h2049811524 = new Transition();
h2049811524.from(state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease).to(state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease);
h2049811524.event(temperatureType);
h2049811524.guard((Event e)->{
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
return temperature.t + getPIM_current_average_diff_var() * getPIM_cooling_time_var() >= getPIM_tmrature_var() + getPIM_delta_var();
});

h2049811524.port(get_sensor_port);
h2049811524.action((Event e)->{
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
PIM_temp_buffer_var[(int)(getPIM_buffer_rear_var())] = (double) (temperature.t);
PIM_buffer_rear_var = (int) ((getPIM_buffer_rear_var() + 1) % getPIM_buffer_size_var());
if(getPIM_buffer_rear_var() == getPIM_buffer_front_var()) {
PIM_buffer_front_var = (int) ((getPIM_buffer_front_var() + 1) % getPIM_buffer_size_var());

}
PIM_current_average_diff_var = (double) ((PIM_temp_buffer_var[(int)(getPIM_buffer_rear_var())] - PIM_temp_buffer_var[(int)(getPIM_buffer_front_var())]) / getPIM_buffer_size_var());
});

Transition h452197985 = new Transition();
h452197985.from(state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease).to(state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease);
h452197985.event(temperatureType);
h452197985.guard((Event e)->{
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
return temperature.t + getPIM_current_average_diff_var() * getPIM_cooling_time_var() < getPIM_tmrature_var() - getPIM_delta_var();
});

h452197985.port(get_sensor_port);
h452197985.action((Event e)->{
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
PIM_temp_buffer_var[(int)(getPIM_buffer_rear_var())] = (double) (temperature.t);
PIM_buffer_rear_var = (int) ((getPIM_buffer_rear_var() + 1) % getPIM_buffer_size_var());
if(getPIM_buffer_rear_var() == getPIM_buffer_front_var()) {
PIM_buffer_front_var = (int) ((getPIM_buffer_front_var() + 1) % getPIM_buffer_size_var());

}
PIM_current_average_diff_var = (double) ((PIM_temp_buffer_var[(int)(getPIM_buffer_rear_var())] - PIM_temp_buffer_var[(int)(getPIM_buffer_front_var())]) / getPIM_buffer_size_var());
});

Transition h1122837517 = new Transition();
h1122837517.from(state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease).to(state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease);
h1122837517.event(timer_timeoutType);
h1122837517.port(guard_temperature_port);
h1122837517.action((Event e)->{
sendPrompt_via_human_output((String) ("WARNING: @TemprDecrease - temperature measurement is delayed"));
});

Transition h1301843573 = new Transition();
h1301843573.from(state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease).to(state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease);
h1301843573.event(set_deltaType);
h1301843573.port(human_input_port);
h1301843573.action((Event e)->{
final Set_deltaMessageType.Set_deltaMessage set_delta = (Set_deltaMessageType.Set_deltaMessage) e;
PIM_delta_var = (double) (set_delta.dlta);
});

Transition h2018565316 = new Transition();
h2018565316.from(state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease).to(state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease);
h2018565316.event(fetch_tempType);
h2018565316.port(human_input_port);
h2018565316.action((Event e)->{
sendTemperature_via_human_output((int) (getPIM_thermo_id_var()), (String) ("temperature "), (double) (getPIM_current_temp_var()));
});

final CompositeState state_PIM_PIM_behavior_Running_Thermostat = new CompositeState("Thermostat");
state_PIM_PIM_behavior_Running_Thermostat.onEntry(()->{
});
state_PIM_PIM_behavior_Running_Thermostat.add(state_PIM_PIM_behavior_Running_Thermostat_TemprDecide);
state_PIM_PIM_behavior_Running_Thermostat.add(state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease);
state_PIM_PIM_behavior_Running_Thermostat.add(state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease);
state_PIM_PIM_behavior_Running_Thermostat.initial(state_PIM_PIM_behavior_Running_Thermostat_TemprDecide);
return state_PIM_PIM_behavior_Running_Thermostat;
}

public Component buildBehavior(String session, Component root) {
if (root == null) {
//Init ports
get_sensor_port = new Port("get_sensor", this);
request_sensor_port = new Port("request_sensor", this);
request_actuator_port = new Port("request_actuator", this);
human_input_port = new Port("human_input", this);
human_output_port = new Port("human_output", this);
guard_temperature_port = new Port("guard_temperature", this);
guard_human_port = new Port("guard_human", this);
} else {
get_sensor_port = ((PIM)root).get_sensor_port;
request_sensor_port = ((PIM)root).request_sensor_port;
request_actuator_port = ((PIM)root).request_actuator_port;
human_input_port = ((PIM)root).human_input_port;
human_output_port = ((PIM)root).human_output_port;
guard_temperature_port = ((PIM)root).guard_temperature_port;
guard_human_port = ((PIM)root).guard_human_port;
}
if (session == null){
//Init state machine
behavior = buildPIM_PIM_behavior();
}
return this;
}

}
